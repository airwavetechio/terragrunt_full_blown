@Library('jenkins-shared-library@development') _

pipeline {
    agent {
        label 'azureslave'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout poll: false, scm: [
                        $class: 'GitSCM',
                        branches: [[name: params.deploy_version]],
                        userRemoteConfigs: [[credentialsId: 'jenkins_gitlab_deploy_key', url: 'git@gitlab.com:ubq/deploy.git']]
                ]
                notifySlack()
            }
        }
        stage('provision') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'airwave_dockerhub_admin') {
                        docker.image('airwave/ci-builder:79').inside("-u root:root --privileged") {
                            sshagent (credentials: ['gocd_ssh_key']) {
                                def tfvar_file = "${env.WORKSPACE}/kube/infra/gcp/terraform.tfvars.json"
                                def pv_settings = null
                                if(params.pv_settings?.trim() != null) {
                                    pv_settings = readJSON text: params.pv_settings
                                }
                                def parameters = [
                                    domain_name: params.domain_name,
                                    proxy_service_url: "proxy.${params.airwave_stack_name}-foundation.svc.cluster.local",
                                    airwave_stack_name: params.airwave_stack_name,
                                    certbot_enabled: false,
                                    airwave_version: params.airwave_version,
                                    docker_registry_email: "devops@airwave.com",
                                    docker_registry_server: "https://index.docker.io/v1/",
                                    airwave_license: params.airwave_license,
                                    region: params.region,
                                    location: params.location,
                                    gke_billing_account: params.gke_billing_account,
                                    gke_num_nodes: params.gke_num_nodes,
                                    gke_num_gpu_nodes: params.gke_num_gpu_nodes,
                                    accelerator_platform:"",
                                    gcp_dns_domain: params.gcp_dns_domain,
                                    gcp_dns_zone: params.gcp_dns_zone,
                                    gcp_dns_project: params.gcp_dns_project,
                                    gke_folder_id: params.gke_folder_id,
                                    gpu_node_type: params.gpu_node_type,
                                    node_type: params.node_type,
                                    gke_version: params.gke_version,
                                    freeze: params.freeze,
                                    gpu_shape: params.gpu_shape ?: "demo",
                                    hf_auth_key: stringFromParamOrCredential("hf_auth_key", "airwave_app_deploy_hf_auth_key"),
                                    ssl: [
                                        enabled: true,
                                        certbot_enabled: false,
                                        certbot_email: null,
                                        certbot_cert_update_job_schedule: null,
                                        certbot_health_check_url: null,
                                        certbot_test_mode: false
                                    ],
                                    slack_webhook: stringFromParamOrCredential("slack_webhook", "airwave_app_deploy_slack_webhook"),
                                    pv_settings: pv_settings,
                                ]
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub_service_user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                    parameters.docker_registry_username = env.USERNAME
                                    parameters.docker_registry_password = env.PASSWORD
                                }
                                writeJSON file: tfvar_file, json: parameters
                                dir("kube/infra/gcp") {
                                    withCredentials([file(credentialsId: params.gcp_service_account, variable: 'GOOGLE_CREDENTIALS')]){
                                        writeFile file: 'service_account.json', text: readFile(GOOGLE_CREDENTIALS)
                                        ansiColor('xterm') {
                                            if(params.action == "plan") {
                                                sh "terragrunt run-all ${params.action} -compact-warnings --var-file=${tfvar_file}"
                                            }
                                            else if(params.action == "destroy") {
                                                input message: 'Would you like to destroy?', ok: 'Yes'

                                                sh "cd modules/postgres && terragrunt state rm 'google_sql_user.postgres_admin_users[\"analysis\"]' || true"
                                                sh "cd modules/postgres && terragrunt state rm 'google_sql_user.postgres_admin_users[\"general\"]' || true"
                                                sh "cd modules/postgres && terragrunt state rm 'google_sql_user.postgres_admin_users[\"backup\"]' || true"

                                                sh "terragrunt run-all ${params.action} -auto-approve -compact-warnings --terragrunt-non-interactive --var-file=${tfvar_file}"
                                            }
                                            else if(params.action == "apply") {
                                                sh "terragrunt run-all ${params.action} -auto-approve -compact-warnings --terragrunt-non-interactive --var-file=${tfvar_file}"
                                            }
                                            if(params.action != "destroy") {
                                                def outputJson = readTgOut("modules/baremetal")

                                                sh """
                                                    set +x
                                                    printf '\n\n'
                                                    printf 'ðŸš€\n'
                                                    printf 'ðŸš€ðŸš€\n'
                                                    printf 'ðŸš€ðŸš€ðŸš€ Deployment complete â€“ ${outputJson.domain_name.value}\n'
                                                    printf 'ðŸš€ðŸš€\n'
                                                    printf 'ðŸš€\n'
                                                    printf '\n\n'
                                                    printf 'Access details:\n'
                                                    printf 'Keycloak admin password: ${outputJson.keycloak_master_password.value}\n'
                                                    printf '\n\n'
                                                """
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            notifySlack(currentBuild.currentResult)
            cleanWs()
        }
    }
}
